#lang racket/base

(require rackunit "interpreter.rkt")

(printf "Running tests...\n")
(printf "Test 1\n")
(check-equal? (interpret "tests/test1.txt") 150 "test1")
(printf "\nTest 2\n")
(check-equal? (interpret "tests/test2.txt") -4 "test2")
(printf "\nTest 3\n")
(check-equal? (interpret "tests/test3.txt") 10 "test3")
(printf "\nTest 4\n")
(check-equal? (interpret "tests/test4.txt") 16 "test4")
(printf "\nTest 5\n")
(check-equal? (interpret "tests/test5.txt") 220 "test5")
(printf "\nTest 6\n")
(check-equal? (interpret "tests/test6.txt") 5 "test6")
(printf "\nTest 7\n")
(check-equal? (interpret "tests/test7.txt") 6 "test7")
(printf "\nTest 8\n")
(check-equal? (interpret "tests/test8.txt") 10 "test8")
(printf "\nTest 9\n")
(check-equal? (interpret "tests/test9.txt") 5 "test9")
(printf "\nTest 10\n")
(check-equal? (interpret "tests/test10.txt") -39 "test10")
(printf "\nTest 11\n")
(check-equal? (interpret "tests/test11.txt") error "test11")
(printf "\nTest 12\n")
(check-equal? (interpret "tests/test12.txt") error "test12")
(printf "\nTest 13\n")
(check-equal? (interpret "tests/test13.txt") error "test13")
(printf "\nTest 14\n")
(check-equal? (interpret "tests/test14.txt") error "test14")
(printf "\nTest 15\n")
(check-equal? (interpret "tests/test15.txt") 'true "test15")
(printf "\nTest 16\n")
(check-equal? (interpret "tests/test16.txt") 100 "test16")
(printf "\nTest 17\n")
(check-equal? (interpret "tests/test17.txt") 'false "test17")
(printf "\nTest 18\n")
(check-equal? (interpret "tests/test18.txt") 'true "test18")
(printf "\nTest 19\n")
(check-equal? (interpret "tests/test19.txt") 128 "test19")
(printf "\nTest 20\n")
(check-equal? (interpret "tests/test20.txt") 12 "test20")
; (printf "\nTest 21\n")
; (check-equal? (interpret "tests/test21.txt") 30 "test21")
; (printf "\nTest 22\n")
; (check-equal? (interpret "tests/test22.txt") 11 "test22")
; (printf "\nTest 23\n")
; (check-equal? (interpret "tests/test23.txt") 1106 "test23")
; (printf "\nTest 24\n")
; (check-equal? (interpret "tests/test24.txt") 12 "test24")
; (printf "\nTest 25\n")
; (check-equal? (interpret "tests/test25.txt") 16 "test25")
; (printf "\nTest 26\n")
; (check-equal? (interpret "tests/test26.txt") 72 "test26")
; (printf "\nTest 27\n")
; (check-equal? (interpret "tests/test27.txt") 21 "test27")
; (printf "\nTest 28\n")
; (check-equal? (interpret "tests/test28.txt") 164 "test28")


(printf "\nPart2 Tests")
(printf "\nP2Test 1\n")
(check-equal? (interpret "tests/P2test1.txt") 20 "P2test1")
(printf "\nP2Test 2\n")
(check-equal? (interpret "tests/P2test2.txt") 164 "P2test2")
(printf "\nP2Test 3\n")
(check-equal? (interpret "tests/P2test3.txt") 32 "P2test3")
(printf "\nP2Test 4\n")
(check-equal? (interpret "tests/P2test4.txt") 2 "P2test4")
(printf "\nP2Test 5\n")
(check-equal? (interpret "tests/P2test5.txt") "error" "P2test5")
(printf "\nP2Test 6\n")
(check-equal? (interpret "tests/P2test6.txt") 25 "P2test6")
(printf "\nP2Test 7\n")
(check-equal? (interpret "tests/P2test7.txt") 21 "P2test7")
(printf "\nP2Test 8\n")
(check-equal? (interpret "tests/P2test8.txt") 6 "P2test8")
(printf "\nP2Test 9\n")
(check-equal? (interpret "tests/P2test9.txt") -1 "P2test9")
(printf "\nP2Test 10\n")
(check-equal? (interpret "tests/P2test10.txt") 789 "P2test10")
(printf "\nP2Test 11\n")
(check-equal? (interpret "tests/P2test11.txt") "error" "P2test11")
(printf "\nP2Test 12\n")
(check-equal? (interpret "tests/P2test12.txt") "error" "P2test12")
(printf "\nP2Test 13\n")
(check-equal? (interpret "tests/P2test13.txt") "error" "P2test13")
(printf "\nP2Test 14\n")
(check-equal? (interpret "tests/P2test14.txt") 12 "P2test14")
; (printf "\nP2Test 15\n")
; (check-equal? (interpret "tests/P2test15.txt") 125 "P2test15")
; (printf "\nP2Test 16\n")
; (check-equal? (interpret "tests/P2test16.txt") 110 "P2test16")
; (printf "\nP2Test 17\n")
; (check-equal? (interpret "tests/P2test17.txt") 2000400 "P2test17")
; (printf "\nP2Test 18\n")
; (check-equal? (interpret "tests/P2test18.txt") 101 "P2test18")
; (printf "\nP2Test 19\n")
; (check-equal? (interpret "tests/P2test19.txt") "error" "P2test19")
; (printf "\nP2Test 20\n")
; (check-equal? (interpret "tests/P2test20.txt") 21 "P2test20")


